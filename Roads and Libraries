import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the roadsAndLibraries function below.
        static long dfs(ArrayList<ArrayList<Integer>> list,int visited[],int i,long cost,int c_road)
    {
        visited[i]=1;

                Iterator <Integer> it=list.get(i).listIterator();
                 {
                     while(it.hasNext())
                     {
                         Integer j=it.next();
                         if(visited[j]==0){
                         cost+=c_road;
                         cost=dfs(list,visited,j,cost,c_road);
                         }
                     }
                 }
                 return cost;

    }
    static long roadsAndLibraries(int n, int c_lib, int c_road, int[][] cities) {
            ArrayList<ArrayList<Integer>> al=new ArrayList<ArrayList<Integer>>();
            for(int i=0;i<=n;i++)
                al.add(i,new ArrayList<Integer>());
             for(int i=0;i<cities.length;i++)
             {
                    int s=cities[i][0];
                    int d=cities[i][1];
                    al.get(s).add(d);
                    al.get(d).add(s);
             }
             long cost=0;
             int visited[]=new int[n+1];
             if(c_lib<=c_road)
                return (long)n*c_lib;
            
             for(int i=1;i<=n;i++)
             {
                 if(visited[i]==0){
                     cost+=c_lib;
                     cost=dfs(al,visited,i,cost,c_road);

                 }
             }
             return cost;


    }


     
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nmC_libC_road = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nmC_libC_road[0]);

            int m = Integer.parseInt(nmC_libC_road[1]);

            int c_lib = Integer.parseInt(nmC_libC_road[2]);

            int c_road = Integer.parseInt(nmC_libC_road[3]);

            int[][] cities = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] citiesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int citiesItem = Integer.parseInt(citiesRowItems[j]);
                    cities[i][j] = citiesItem;
                }
            }

            long result = roadsAndLibraries(n, c_lib, c_road, cities);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
